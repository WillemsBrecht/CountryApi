// <auto-generated />
using System;
using CountryApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CountryApi.Migrations
{
    [DbContext(typeof(VisitContext))]
    partial class VisitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CountryApi.Models.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryISOCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryISOCode");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = new Guid("bd623c13-6f0e-4749-b24c-65cc64128e6b"),
                            CountryISOCode = "LUX",
                            Name = "Luxembourg City",
                            Population = 114303
                        },
                        new
                        {
                            CityId = new Guid("562ba64e-50b2-488e-827c-719ce3424618"),
                            CountryISOCode = "LUX",
                            Name = "Echternach",
                            Population = 5614
                        },
                        new
                        {
                            CityId = new Guid("dbba6527-4ff7-4aee-acc6-be8dac6ce333"),
                            CountryISOCode = "BE",
                            Name = "Bruges",
                            Population = 118656
                        },
                        new
                        {
                            CityId = new Guid("6646ab14-42e9-4cc1-8c9c-b0f9a5cba91d"),
                            CountryISOCode = "BE",
                            Name = "Ghent",
                            Population = 466000
                        },
                        new
                        {
                            CityId = new Guid("27ab75f7-cb49-484c-8bf9-b9d4c83ce8da"),
                            CountryISOCode = "BE",
                            Name = "Antwerp",
                            Population = 523248
                        },
                        new
                        {
                            CityId = new Guid("16ff71d5-576b-4f2f-ac1f-79c6af2fa804"),
                            CountryISOCode = "BE",
                            Name = "Brussels",
                            Population = 2081000
                        },
                        new
                        {
                            CityId = new Guid("de1f292d-2b21-448e-a0ee-af0b8ef85f97"),
                            CountryISOCode = "BE",
                            Name = "Liège",
                            Population = 195965
                        },
                        new
                        {
                            CityId = new Guid("dce753c4-f269-4dd3-a642-cb5bfe9d96f0"),
                            CountryISOCode = "BE",
                            Name = "Tournai",
                            Population = 69083
                        },
                        new
                        {
                            CityId = new Guid("9127be63-e6e2-481a-897e-6e086c11f6d4"),
                            CountryISOCode = "FR",
                            Name = "Strasbourg",
                            Population = 272222
                        },
                        new
                        {
                            CityId = new Guid("77a70821-1321-4351-9aaa-46309126c039"),
                            CountryISOCode = "FR",
                            Name = "Paris",
                            Population = 11017000
                        },
                        new
                        {
                            CityId = new Guid("c6acde98-1b74-41b5-b19b-86b6b7f62dc9"),
                            CountryISOCode = "FR",
                            Name = "Calais",
                            Population = 72929
                        },
                        new
                        {
                            CityId = new Guid("5e8e84c6-ad5d-432d-b907-d4817624a494"),
                            CountryISOCode = "FR",
                            Name = "Calais",
                            Population = 868277
                        },
                        new
                        {
                            CityId = new Guid("2f4509e4-00e7-4761-b2d4-c42b7e8118a3"),
                            CountryISOCode = "FR",
                            Name = "Bordeaux",
                            Population = 257068
                        },
                        new
                        {
                            CityId = new Guid("8b750db7-ba7b-4c49-8d08-056c0fa9d1d9"),
                            CountryISOCode = "NL",
                            Name = "Rotterdam",
                            Population = 651446
                        },
                        new
                        {
                            CityId = new Guid("66b860f7-6bcd-41ab-98d6-79e79659cf18"),
                            CountryISOCode = "NL",
                            Name = "Amsterdam",
                            Population = 1149000
                        },
                        new
                        {
                            CityId = new Guid("4c7783d1-c25d-4ab8-bbc8-501ad7bb0336"),
                            CountryISOCode = "DE",
                            Name = "Berlin",
                            Population = 3562000
                        },
                        new
                        {
                            CityId = new Guid("28ac2ada-ec13-48b6-ba07-d23c364fab45"),
                            CountryISOCode = "DE",
                            Name = "Frankfurt",
                            Population = 777000
                        },
                        new
                        {
                            CityId = new Guid("25eaffac-6d3a-497f-aef9-f4f42e358e08"),
                            CountryISOCode = "DE",
                            Name = "Hamburg",
                            Population = 1790000
                        },
                        new
                        {
                            CityId = new Guid("057dee0b-ec44-4d0f-9542-3346f10a2f8c"),
                            CountryISOCode = "DE",
                            Name = "Munich",
                            Population = 1558395
                        },
                        new
                        {
                            CityId = new Guid("d9fc3bca-9c0f-44b1-99be-0d8a5863a6ec"),
                            CountryISOCode = "DE",
                            Name = "Trier",
                            Population = 111528
                        });
                });

            modelBuilder.Entity("CountryApi.Models.Country", b =>
                {
                    b.Property<string>("ISOCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("ISOCode");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            ISOCode = "BE",
                            Name = "Belgium",
                            Population = 11629113
                        },
                        new
                        {
                            ISOCode = "LUX",
                            Name = "Luxembourg",
                            Population = 613894
                        },
                        new
                        {
                            ISOCode = "FR",
                            Name = "France",
                            Population = 65387226
                        },
                        new
                        {
                            ISOCode = "DE",
                            Name = "Germany",
                            Population = 83995211
                        },
                        new
                        {
                            ISOCode = "NL",
                            Name = "The Netherlands",
                            Population = 17164721
                        });
                });

            modelBuilder.Entity("CountryApi.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CountryApi.Models.UserCity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CityId");

                    b.ToTable("UserCities");
                });

            modelBuilder.Entity("CountryApi.Models.UserCountry", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISOCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ISOCode");

                    b.ToTable("UserCountries");
                });

            modelBuilder.Entity("CountryApi.Models.City", b =>
                {
                    b.HasOne("CountryApi.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryISOCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CountryApi.Models.UserCity", b =>
                {
                    b.HasOne("CountryApi.Models.User", "User")
                        .WithMany("VisitedCities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CountryApi.Models.UserCountry", b =>
                {
                    b.HasOne("CountryApi.Models.User", "User")
                        .WithMany("VisitedCountries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CountryApi.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CountryApi.Models.User", b =>
                {
                    b.Navigation("VisitedCities");

                    b.Navigation("VisitedCountries");
                });
#pragma warning restore 612, 618
        }
    }
}
